# Deep Work SaaS App - Product Requirements Document (PRD)

## Overview

The Deep Work SaaS app helps users achieve focused, distraction-free work sessions inspired by Cal Newport's Deep Work, enabling them to create meaningful work in an era of constant distractions. Targeting individuals such as students, programmers, and creatives, the app provides tools for task management, time tracking, productivity visualization, and customizable workspaces with dynamic widgets. The goal is to validate an MVP through community channels (e.g., online forums, social media groups) before scaling.

## Key Features

### Deep Work Timer

- A timer for focus and break sessions (e.g., Pomodoro-style, customizable durations)
- Visual feedback via a circular progress bar using Tailwind CSS and Shadcn/UI
- Supports session types (e.g., "Focus", "Break") with start, pause, and reset functionality

### Customizable Workspaces

- Users can create named workspaces (e.g., "Study for Exams", "Learn Backend JavaScript", "Write Novel")
- Each workspace tracks tasks, time spent, and a dynamic set of user-selected widgets
- Workspaces are stored in a simple state (e.g., Zustand or React Context) with persistence (local storage for MVP, backend later)

### Dynamic Widgets

- Users can add, remove, and drag-and-drop widgets within a workspace to customize layout and functionality
- Widgets are positioned in a responsive grid (stacked on mobile, multi-column on desktop) using Tailwind CSS
- Supported widget types:
  - **Sticky Notes**: For quick thoughts or reminders, editable text fields
  - **Resources Tab**: List of user-defined hyperlinks (e.g., reference materials, tutorials)
  - **Kanban**: Task board with "To Do", "In Progress", "Done" columns for tracking progress
  - **Markdown Notepad**: Text editor supporting Markdown for notes or code snippets
  - **Media Player**: Ambient noise player for focus (e.g., white noise, rain sounds); Spotify integration as a future stretch goal
- Example workspaces:
  - **Study for Exams**: Core features (Timer, Heat Grid Stats) + Sticky Notes (for quick thoughts) + Resources Tab (study links)
  - **Learn Backend JavaScript**: Core features (Timer, Heat Grid Stats) + Kanban (track learning tasks) + Markdown Notepad (code snippets) + Media Player (ambient noise)
- Widgets are draggable using a library like `@dnd-kit` for mobile-friendly drag-and-drop
- Widget configurations (type, position, content) are saved per workspace
- Future addition: Widget marketplace or templates for pre-configured setups

### Task Management

- Tasks are organized in a kanban-style list, with droppable zones for "To Do", "In Progress", "Done"
- Kanban can be embedded as a widget within workspaces or accessed as a standalone feature

### Statistics and Visualization

- Tracks time spent per workspace/project, displayed as a line chart using Recharts
- Heat grid to visualize "time spent deep" across days/weeks, embedded as a core widget in each workspace
- Future addition: Exportable reports for time tracking

## Cursor-Specific Instructions

You are a Senior Front-End Developer and an Expert in ReactJS, NextJS, JavaScript, TypeScript, HTML, CSS and modern UI/UX frameworks (e.g., TailwindCSS, Shadcn, Radix). You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning.

- Follow the user’s requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules down below at Code Implementation Guidelines .
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.

### Coding Environment

The user asks questions about the following coding languages:

- ReactJS
- NextJS
- JavaScript
- TypeScript
- TailwindCSS
- HTML
- CSS

### Code Implementation Guidelines

Follow these rules when you write code:

- Use early returns whenever possible to make the code more readable.
- Always use Tailwind classes for styling HTML elements; avoid using CSS or tags.
- Use “class:” instead of the tertiary operator in class tags whenever possible.
- Use descriptive variable and function/const names. Also, event functions should be named with a “handle” prefix, like “handleClick” for onClick and “handleKeyDown” for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex=“0”, aria-label, on:click, and on:keydown, and similar attributes.
- Use consts instead of functions, for example, “const toggle = () =>”. Also, define a type if possible.
